//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.7.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

using System.Diagnostics.CodeAnalysis;

namespace Hestia.ConsoleRunner.Configuration
{
    #pragma warning disable // Disable all warnings

    /// <summary>Schema for repositories to be parsed by Hestia</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    [ExcludeFromCodeCoverage]
    public partial class ConsoleRunnerConfig 
    {
        /// <summary>Path to the repository's root</summary>
        [Newtonsoft.Json.JsonProperty("repoPath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepoPath { get; set; } = "";
    
        /// <summary>Location of source files relative to the root path</summary>
        [Newtonsoft.Json.JsonProperty("sourceRoot", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceRoot { get; set; } = "";
    
        /// <summary>File extensions that will be treated as valid source files</summary>
        [Newtonsoft.Json.JsonProperty("sourceExtensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> SourceExtensions { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Command that will be used to generate the coverage file</summary>
        [Newtonsoft.Json.JsonProperty("coverageCommand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CoverageCommand { get; set; } = "";
    
        /// <summary>Location where the coverage file will be generated</summary>
        [Newtonsoft.Json.JsonProperty("coverageOutputLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CoverageOutputLocation { get; set; } = "";
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }
}
